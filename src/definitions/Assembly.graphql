
type AssemblyReference {
   source: String!
   target: String!   
}

type Assembly {
   creationDate: LocalDateTime!
   creator: String
   isDebug: Boolean
   isILOnly: Boolean!
   isNative: Boolean!
   name: String!
   shortName: String!
   targetFramework: String
   targetProcessor: String!
   version: String
   
   directReferencedAssemblies: [Assembly!]! @relation(name: "REFERENCE", direction: OUT)

   directReferenceCount: Int @cypher(statement: "MATCH (this)-[r:REFERENCE]->(:Assembly) RETURN COUNT(r)") 
   
   allReferencedAssemblies(depth: Int = 200): [Assembly!]!
      @cypher(statement: """MATCH p = (this)-[:REFERENCE*1..]->(x:Assembly)
                          WHERE LENGTH(p) <= $depth
                          RETURN DISTINCT (x)""")

   allReferencedAssembliesLinks(depth: Int = 200): [AssemblyReference!]!
      @cypher(statement: """MATCH p = (this)-[:REFERENCE*]->(x:Assembly)
                            WHERE LENGTH(p) <= $depth
                            WITH *, relationships(p) AS r
                            return { source :startNode(last(r)).name, target: endNode(last(r)).name}""")
   
   maxDepth:  Int 
      @cypher(statement: """MATCH p=(this)-[:REFERENCE*]->(child:Assembly)
                            WHERE NOT (child)-[:REFERENCE]->()
                            RETURN LENGTH(p) AS maxLenght
                            ORDER BY maxLenght DESC
                            Limit 1"""),
}

extend type Query {
  Assembly: [Assembly]
  AssemblyCount(filter: _AssemblyFilter): Int
}

type Mutation {
  removeAssembly(assemblyName: String!): Assembly @cypher(statement: """
      MATCH (a :Assembly {name:$assemblyName})
      WITH a, a {.*} as snapshot
      DETACH DELETE a
      RETURN snapshot
    """)
}
